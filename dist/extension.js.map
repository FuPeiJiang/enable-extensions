{"version":3,"sources":[".././extension.js","../external \"child_process\"","../external \"fs\"","../external \"path\"","../external \"process\"","../external \"vscode\"","../webpack/bootstrap","../webpack/startup"],"names":[],"mappings":";;;;;;;;;;AAAA;AACA;AACA,eAAe,mBAAO,CAAC,sBAAQ;AAC/B,aAAa,mBAAO,CAAC,kBAAM;AAC3B;AACA,WAAW,mBAAO,CAAC,cAAI;AACvB;AACA,sBAAsB,mBAAO,CAAC,oCAAe;AAC7C,OAAO,MAAM,GAAG,mBAAO,CAAC,wBAAS;AACjC;AACA;AACA;;AAEA;AACA,WAAW,wBAAwB;AACnC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,2EAA2E,gBAAgB;;AAE3F;AACA;;;;AAIA;AACA;AACA;AACA;AACA,iBAAiB,YAAY;AAC7B;AACA;AACA,uBAAuB;;AAEvB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;;AAEA;;AAEA;AACA,sFAAsF,qBAAqB;AAC3G;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA,GAAG;AACH;AACA;AACA;AACA,EAAE;;AAEF;AACA;;AAEA;AACA,uBAAuB;;AAEvB;AACA;AACA;AACA;;AAEA;AACA,4CAA4C,kBAAkB;AAC9D,C;;;;;;;;;;;ACxGA,2C;;;;;;;;;;;ACAA,gC;;;;;;;;;;;ACAA,kC;;;;;;;;;;;ACAA,qC;;;;;;;;;;;ACAA,oC;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;UCrBA;UACA;UACA;UACA","file":"extension.js","sourcesContent":["// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nconst vscode = require('vscode')\nconst path = require('path')\nconst p = console.log.bind(console)\nconst fs = require(\"fs\")\nconst window = vscode.window\nconst child_process = require('child_process')\nconst { cwd } = require('process')\nconst extensions = vscode.extensions\n// this method is called when your extension is activated\n// your extension is activated the very first time the command is executed\n\n/**\n * @param {vscode.ExtensionContext} context\n */\nasync function activate(context) {\n\np(5345345)\n\t// p(process.env)\n\t// p(process.env.VSCODE_CWD)\n\n\t//Microsoft VS Code\\resources\\app  to  Microsoft VS Code\\bin \n\t/* \tconst codePath = path.join(path.dirname(path.dirname(vscode.env.appRoot)), \"bin\")\n\t\n\t\tconst extensionsList = child_process.execSync(\"code --list-extensions\", { cwd: codePath }).toString().slice(0, -1).split('\\n')\n\t\n\t\t// console.log(extensions.all);\n\t\t// p(Object.keys(extensions.all))\n\t\n\t\n\t\n\t\t// p(extensionsList)\n\t\tvar length = extensionsList.length\n\t\tconst activeExtensions = []\n\t\tvar total = 0\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\t// const extensionObj = extensions.getExtension(\"ms-toolsai.jupyter\")\n\t\t\tconst extensionObj = extensions.getExtension(extensionsList[i])\n\t\t\tif (!extensionObj) { continue }\n\t\n\t\t\t// p(extensionObj)\n\t\t\t// p(Object.keys(extensionObj))\n\t\t\tactiveExtensions.push(extensionsList[i])\n\t\t\t// p(extensionsList[i], extensionObj.isActive)\n\t\t\ttotal++\n\t\t\t// return\n\t\n\t\t\t// p(i, extensionsList[i])\n\t\t}\n\t\n\t\tp(\"total:\", total)\n\t\n\t\tconst appdataDir = path.join(process.env.APPDATA || (process.platform == 'darwin' ? process.env.HOME + '/Library/Preferences' : process.env.HOME + \"/.local/share\"), \"vscode_activate-extensions\")\n\t\n\t */\n\n\t// await writeFile(path.join(appdataDir, \"1.json\"), JSON.stringify(activeExtensions), 'utf-8')\n\n\tlet disposable = vscode.commands.registerCommand('activate-extensions.helloWorld', async function () {\n\t\ttry {\n\n\t\t\tvar packageJsonPath = path.join(__dirname, \"package.json\")\n\t\t\tif (!fs.existsSync(packageJsonPath)) {\n\t\t\t\tpackageJsonPath = path.join(path.dirname(packageJsonPath), \"package.json\")\n\t\t\t}\n\n\n\t\t\tconst jsonAr = JSON.parse(fs.readFileSync(packageJsonPath, 'utf-8'))\n\n\t\t\tconst appdataDir = path.join(process.env.APPDATA || (process.platform == 'darwin' ? process.env.HOME + '/Library/Preferences' : process.env.HOME + \"/.local/share\"), \"vscode_activate-extensions\")\n\n\t\t\tvar extensionListFile\n\t\t\t// extensionListFile = await window.showQuickPick([\"fwefwf\", \"65476\", \"kyukyuk\"], { canPickMany: false })\n\t\t\textensionListFile = \"1.json\"\n\n\t\t\t// p(JSON.parse(fs.readFileSync(path.join(appdataDir, extensionListFile), 'utf-8')))\n\n\t\t\tjsonAr.extensionDependencies = JSON.parse(fs.readFileSync(path.join(appdataDir, extensionListFile), 'utf-8'))\n\n\t\t\t// p(jsonAr)\n\t\t\t// p(JSON.stringify(jsonAr))\n\n\t\t\tawait writeFile(packageJsonPath, JSON.stringify(jsonAr), 'utf-8')\n\n\t\t} catch (error) {\n\t\t\tconsole.log(error)\n\t\t}\n\t\t// vscode.window.showInformationMessage('Hello World from activate extensions!')\n\t})\n\n\tcontext.subscriptions.push(disposable)\n}\n\n// this method is called when your extension is deactivated\nfunction deactivate() { }\n\nmodule.exports = {\n\tactivate,\n\tdeactivate\n}\n\nfunction writeFile(filePath, contents, encoding) {\n\tfs.promises.mkdir(path.dirname(filePath), { recursive: true }).then(() => fs.promises.writeFile(filePath, contents, encoding))\n}","module.exports = require(\"child_process\");;","module.exports = require(\"fs\");;","module.exports = require(\"path\");;","module.exports = require(\"process\");;","module.exports = require(\"vscode\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(\"./extension.js\");\n"],"sourceRoot":""}